<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">


	<bean id="dao" class="com.jwn.springdemo.ref.Dao">
		<property name="dataSource" value="C3P0"></property>
	</bean>

	<!-- 通过 scope 设置作用范围 -->
	<bean id="dao1" class="com.jwn.springdemo.ref.Dao" scope="prototype"></bean>
	<!-- 自动装配 根据属性名称 完成自动装配 -->
	<bean id="service1" class="com.jwn.springdemo.ref.Service"
		autowire="byName"></bean>
	<!-- 根据类型 进行自动装配 -->
	<bean id="action" class="com.jwn.springdemo.ref.Action" autowire="byType"></bean>

	<!-- 导入外部资源文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>

	<!-- 测试SPEL -->
	<bean id="girl" class="com.jwn.springdemo.helloworld.User"
		p:userName="周迅"></bean>
	<bean id="boy" class="com.jwn.springdemo.helloworld.User"
		p:userName="高深远" p:wifeName="#{girl.userName}" init-method="init"
		destroy-method="destroy"></bean>

	<!-- 设置bean的后置处理器 -->
	<bean class="com.jwn.springdemo.ref.MyBeanPostProcessor"></bean>

	<!-- 通过静态工厂方法来配置bean -->
	<bean id="dateFormat" class="java.text.DateFormat" factory-method="getDateInstance">
		<!-- 通过 constructor-arg 来给静态工厂方法指定 参数 -->
		<constructor-arg value="2"></constructor-arg>
	</bean>
	<!-- 2. 实例工厂方法: 先需要创建工厂对象, 再调用工厂的非静态方法返回实例(了解) -->
	<!-- ①. 创建工厂对应的 bean 的实例 -->
	<bean id="simpleDateFormat" class="java.text.SimpleDateFormat">
		<constructor-arg value="yyyy年MM月dd日 hh时MM分ss秒"></constructor-arg>
	</bean>
	<!-- ②. 有实例工厂方法来创建 bean 实例 -->
	<!-- factory-bean 指向工厂 bean, factory-method 指定工厂方法(了解) -->
	<bean id="dateTime" factory-bean="simpleDateFormat"
		factory-method="parse">
		<constructor-arg value="2017年02月22日 16时05分06秒"></constructor-arg>
	</bean>

	<!-- 配置通过 FactroyBean 的方式来创建 bean 的实例(了解) -->
	<bean id="user7" class="com.jwn.springdemo.ref.UserBean"></bean>
	<bean id="user8" class="com.jwn.springdemo.helloworld.User">
	  <property name="userName" value="#{(T(java.lang.Math).PI*2).toString()+' jwnxieyong'.toUpperCase()}"></property>
	</bean>
</beans>
